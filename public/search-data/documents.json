[
  {
    "slug": "/introduction/changelog",
    "title": "Changelog",
    "description": "Changelogs and improvements to the Documents projects.",
    "content": "## Added\n\n**Linting and Formatting**:\n\n* Added `npm run lint` and `npm run lint:fix` scripts to automate linting tasks.\n* Added `npm run format` and `npm run format:check` scripts to ensure consistent code formatting.\n\n**SEO Enhancements**:\n\n* Added an SEO component to MDX pages to dynamically include `keywords` and `lastModified` metadata for improved SEO generation.\n\n## Updated\n\n**Next.js Upgrade**:\n\n* Upgraded the project from **Next.js 14** to **Next.js 15**, leveraging the latest features and performance improvements.\n\n**Codebase Improvements**:\n\n* Reordered imports across the project files for better consistency and readability.\n\n**Mermaid Component**:\n\n* Fixed an ID bug that caused rendering issues when multiple Mermaid diagrams were included in MDX pages.\n* Improved initialization and rendering logic to prevent duplicate diagram rendering.\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "This section provides an overview of how to get started with the Documents, Next.js Document Starter Kit.",
    "content": "![Banner](/images/banner.png \"Documents\")\n\n## Documents\n\nWelcome to **Documents**, a powerful and flexible Next.js documentation starter kit designed to simplify the process of creating high-quality, comprehensive\r\nproduct documentation, technical manuals, and business guides. Built with **React**, **Tailwind CSS**, and **TypeScript**, this starter kit provides the\r\nfoundation to build your project documentation and knowledge base.\n\nDocuments was crafted to streamline the creation, management and showcasing of documentation, allowing developers and teams to focus on the content rather\r\nthan building the underlying structure. This documentation aims to help you get up and running with the kit, exploring the various features and providing\r\ninsights into how to structure and present your content effectively.\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Rubix Studios\" description=\"Australia's leading branding, marketing and web development company.\" href=\"https://www.rubixstudios.com.au/\" external={true} />\n</CardGrid>\n\n## Why Documents?\n\nDocuments was created as an open-source project to help the community streamline their documentation process, enabling developers to focus on more critical\r\ntasks. Built with scalability in mind, it adapts to projects of all sizes, from single-page guides to comprehensive knowledge bases.\n\nThe integration of MDX, custom components and Tailwind CSS ensures an intuitive experience, simplifying both content creation and management.\n\n* **Product Guides**: Comprehensive manuals for product usage, setup and troubleshooting.\n* **Business Documentation**: Clear and structured documentation for internal processes, policies and systems.\n* **Technical Manuals**: Detailed guides for APIs, software development kits (SDKs) and technical processes.\n\nDocuments offers extensive customization options, allowing you to easily align the design and functionality with your branding.\n\n## Key Features\n\nHere are some of the features that make **Documents** ideal for building your documentation:\n\n| Feature                              | Description                                                                                                     |\r\n| ------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\r\n| **Content Creation**                 | Write documentation using Markdown with JSX, custom components and Mermaid.js for diagrams.                     |\r\n| **Navigation & Structure**           | Organize content with multi-level navigation, automatically generated tables of contents and smooth pagination. |\r\n| **Code Features**                    | Syntax highlighting, enhanced code blocks and a code switcher with copy functionality.                          |\r\n| **Advanced Search**                  | Fuzzy search with term highlighting for quick and accurate results.                                             |\r\n| **Theming & Layout**                 | Supports light/dark modes with automatic switching and responsive design.                                       |\r\n| **Math & Tables**                    | Seamless integration of LaTeX for math and structured tables.                                                   |\r\n| **SEO & Meta Tags**                  | Built-in SEO, metadata generation and control over meta tags for better search rankings and social sharing.     |\r\n| **AI-powered Docs (In Development)** | Future feature for AI-driven content discussions and search.                                                    |\n\n## How to Use These Documents\n\nYou'll find the documentation's navigation bar on the left side of the screen. The pages are organized in a logical sequence, progressing from foundational\r\ntopics to more advanced concepts, allowing you to follow along step-by-step as you build your documentation. However, feel free to explore the content in\r\nany order, selecting the sections most relevant to your use case.\n\nOn the right side of the screen, a table of contents provides easy navigation between sections of each page. For quick access to specific content, you can\r\nuse the search bar at the top or the search shortcut (`Ctrl+K` or `Cmd+K`).\n\nHead over to the [Installation Guide](/docs/introduction/installation).\n\n## Join our Community\n\nIf you have questions about anything related to Documents, you're always welcome to ask our community on [GitHub](https://github.com/rubixvi/rubix-documents), [X (Twitter)](https://x.com/rubixstory), [Facebook](https://www.facebook.com/rubixstudios)\r\nand [Reddit](https://www.reddit.com/r/RubixStudios/).\n"
  },
  {
    "slug": "/introduction/installation",
    "title": "Installation",
    "description": "This guide covers the installation of Documents and how to edit your new project.",
    "content": "To install and edit the Documents, you need to have several prerequisites in place. Here's a list of all the essential pre-requisites\r\nfor setting up and working on this project.\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Frubixvi%2Frubix-documents\\&project-name=my-documents\\&repository-name=my-documents\\&demo-title=Documents\\&demo-description=This%20Document%20Starter%20Kit%20is%20developed%20with%20Next.js%2C%20Tailwind%20CSS%20and%20TypeScript.%20It%20serves%20as%20a%20flexible%20and%20scalable%20foundation%20for%20building%20documentation%20websites%20or%20content-driven%20projects.\\&demo-url=https%3A%2F%2Frubix-documents.vercel.app%2F\\&demo-image=https%3A%2F%2Fgithub.com%2Frubixvi%2Frubix-documents%2Fblob%2Fmain%2Fpublic%2Fscreens%2Fscreen-1.png)\n\n## Prerequisites\n\n<Step>\n  <StepItem title=\"System Requirements\">\n    * **Node.js:** Make sure you have Node.js installed. The project uses `npm`, which comes with Node.js. Install Node.js from here.\n    * **NPM or Yarn:** Since the project uses `npm` commands, ensure that npm is installed with Node.js. Alternatively, you can use Yarn if preferred.\n\n    To verify installation, run:\n\n    ```bash\n    node -v\r\n    npm -v\n    ```\n  </StepItem>\n\n  <StepItem title=\"Git\">\n    You need to have Git installed to clone the repository. Download Git from [here](https://git-scm.com/).\n\n    ```bash\n    git --version\n    ```\n  </StepItem>\n\n  <StepItem title=\"Code Editor\">\n    Youâ€™ll need a code editor to work on the project. Common options include:\n\n    * [Visual Studio Code](https://code.visualstudio.com/)\n    * [WebStorm](https://www.jetbrains.com/webstorm/)\n    * Any other text editor you prefer.\n  </StepItem>\n\n  <StepItem title=\"Required Knowledge\">\n    * **Next.js:** Since this is a Next.js project, you should be familiar with Next.js basics.\n    * **React:** The project uses React, so understanding React's component structure and hooks will help.\n    * **TypeScript:** The project is written in TypeScript, so you should have a basic understanding of it.\n    * **Tailwind:** The project uses Tailwind CSS for styling.\n    * **MDX:** Markdown + JSX (MDX) is used for writing documentation.\n  </StepItem>\n</Step>\n\n## Installation\n\n<Step>\n  <StepItem title=\"Clone the Repository\">\n    First, clone the repository to your local machine using Git:\n\n    ```bash\n    git clone https://github.com/rubixvi/rubix-documents.git\n    ```\n\n    Change the directory to the project folder:\n\n    ```bash\n    cd rubix-documents\n    ```\n  </StepItem>\n\n  <StepItem title=\"Install Dependencies\">\n    Use npm to install all the required dependencies:\n\n    ```bash\n    npm install\n    ```\n\n    This will install all the dependencies listed in the package.json file, including:\n\n    * Next.js\n    * React\n    * TypeScript\n    * Tailwind CSS\n    * MDX components\n    * Other dependencies like ESLint, PostCSS, Husky, etc.\n  </StepItem>\n\n  <StepItem title=\"Running the Development Server\">\n    Start the development server by running:\n\n    ```bash\n    npm run dev\n    ```\n\n    This will start the local server, and you can open your browser at:\n\n    ```arduino\n    http://localhost:3000\n    ```\n  </StepItem>\n\n  <StepItem title=\"Editing the Project\">\n    * **MDX Files:** Documentation content is stored in `contents/docs`.\n    * **Components:** You can edit React components in the `components/` directory.\n    * **Tailwind:** Tailwind styling are managed in `tailwind.config.ts` and `app/globals.css`.\n\n    To make any changes to the project, open the files in your editor and modify them as needed.\n\n    <Note title=\"Required\" type=\"danger\">\n      The project's search functionality relies on the Husky's automation to build\r\n      `search-data/documents.json` ensure git commit is performed to generate this\r\n      file.\n    </Note>\n  </StepItem>\n\n  <StepItem title=\"Building for Production\">\n    Once youâ€™ve made your changes and want to build the project for production:\n\n    ```bash\n    npm run build\n    ```\n\n    This will generate a production-ready build of the app.\n  </StepItem>\n\n  <StepItem title=\"Running Production Server\">\n    To run the production server:\n\n    ```bash\n    npm run start\n    ```\n\n    The production app will be available at:\n\n    ```arduino\n    http://localhost:3000\n    ```\n  </StepItem>\n</Step>\n\n## Optional\n\n<Step>\n  <StepItem title=\"Deploying to Vercel\">\n    This project is optimized for Vercel deployment. To deploy to Vercel:\n\n    * Go to [vercel.com](https://vercel.com/) and sign up.\n    * Link your GitHub repository and deploy the project.\n    * Vercel will handle the build process for you automatically.\n  </StepItem>\n\n  <StepItem title=\"Linting and Pre-commit Hooks\">\n    The project uses ESLint for linting and Husky for Git hooks. These tools are configured automatically, but you can customize them in `.eslintrc.json` and `.husky` directories.\n  </StepItem>\n</Step>\n\n## Important Information\n\nThe project's search functionality relies on the Husky's automation to build `search-data/documents.json` ensure git commit is performed to generate this file.\n"
  },
  {
    "slug": "/introduction/test",
    "title": "Test",
    "description": "Setting up and configuring your documentation project",
    "content": "Setting up your new documentation project is straightforward. Most of the essential project settings can be configured within the `settings` folder.\n\n## Settings\n\nThis section provides the core settings for your documentation site, such as defining the site's URL, site icon and title.\n\n```tsx showLineNumbers\nexport const url = \"\"                 // The URL for your documentation site\r\nexport const siteicon = \"\"            // Icon displayed next to the site name in the header\r\nexport const sitename = \"\"            // Title of your documentation site\n```\n\n## Google Tags\n\nThis section allows you to integrate Google Tag Manager into your documentation project. You can add your GTM code and configure whether it's connected.\n\n```tsx showLineNumbers\nexport const gtm = \"\"                 // Add your Google Tag Manager code here\r\nexport const gtmconnected = true      // Set to true if GTM is connected, otherwise set to false\n```\n\n## Search Engine\n\nConfigure essential SEO settings to ensure your documentation site is optimized for search engines. This includes meta descriptions, keywords and social media sharing details like images and alt text.\n\n```tsx showLineNumbers\nexport const description = \"\"         // Description of your documentation site for SEO\r\nexport const keywords = [\"\", \"\"]      // List of SEO keywords for your documentation site\r\nexport const urlimage = \"\"            // The URL of the image used when sharing on social media)\r\nexport const imagealt = \"\"            // Alt text for shared images, helpful for screen readers\r\nexport const twitterhandle = \"\"       // Your companyâ€™s Twitter handle for social sharing\n```\n\n## Footer Branding\n\nThe footer settings allow you to customize the company information displayed at the bottom of the site. You can add the company name and the URL that the name will link to.\n\n```tsx showLineNumbers\nexport const companyname = \"\"         // The company name displayed in the copyright section\r\nexport const companylink = \"\"         // The URL your company name should link to\n```\n\n## General Layout\n\nThe layout settings control the appearance and functionality of various elements of the documentation site, such as branding, the right sidebar, feedback options, table of contents, and scroll-to-top functionality.\n\n```tsx showLineNumbers\nexport const branding = true          // Set to true to display our branding elements\r\nexport const rightsidebar = true      // Set to true to enable the right sidebar with feedback, table of contents and scroll-to-top\r\nexport const feedbackedit = true      // Control to enable/disable feedback on GitHub\r\nexport const tableofcontent = true    // Control to enable/disable the generated table of contents\r\nexport const totopscroll = true       // Control to enable/disable scroll-to-top button\n```\n\n## Github Control\n\nIf your MDX files are hosted on GitHub, you can configure the project to load documents directly from there. This option can be useful for syncing documentation updates directly with your repository.\n\n```tsx showLineNumbers\nexport const loadfromgithub = false   // Set to true to load your MDX documents directly from GitHub\n```\n\n## Project Structure\n\n<CardGrid>\n  <Card title=\"Navigation\" href=\"/docs/navigation\" icon=\"alignJustify\" variant=\"small\" description=\"Creating your navigation\" />\n</CardGrid>\n"
  },
  {
    "slug": "/markdown/cards",
    "title": "Cards",
    "description": "Explore and implement various card styles, including small, large and image cards.",
    "content": "This section introduces the different card styles available in the system, from compact small cards to visually rich image cards. Each example is paired with JSX code snippets, providing you with a practical guide to incorporate these components seamlessly into your project.\n\n## Small Card\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"/docs/introduction/installation\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Setup\" href=\"/docs/introduction/setup\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n</CardGrid>\n\n```jsx\n<CardGrid>\r\n  <Card\r\n    title=\"Instructions\"\r\n    href=\"/docs/introduction/installation\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n    description=\"test description\"\r\n  />\r\n  <Card\r\n    title=\"Setup\"\r\n    href=\"/docs/introduction/setup\"\r\n    icon=\"alignJustify\"\r\n    variant=\"small\"\r\n  />\r\n  <Card\r\n    title=\"Rubix Studios\"\r\n    href=\"https://www.rubixstudios.com.au\"\r\n    icon=\"alignJustify\"\r\n    external={true}\r\n    variant=\"small\"\r\n  />\r\n</CardGrid>\n```\n\n## Large Card\n\n<CardGrid>\n  <Card subtitle=\"Instructions\" title=\"Installation\" description=\"Get started with Documents using our quick start installation guide to get your project started.\" href=\"/docs/introduction/installation\" />\n\n  <Card subtitle=\"Setup\" title=\"Site Settings\" description=\"Setting up your Documents projects layout, links and search engine optimisation.\" href=\"/docs/introduction/setup\" />\n\n  <Card subtitle=\"Support\" title=\"Rubix Studios\" description=\"Australia's leading branding, marketing and web development company.\" href=\"https://www.rubixstudios.com.au/\" external={true} />\n</CardGrid>\n\n```jsx\n<CardGrid>\r\n  <Card\r\n    subtitle=\"Instructions\"\r\n    title=\"Installation\"\r\n    description=\"Get started with Documents using our quick start installation guide to get your project started.\"\r\n    href=\"/docs/introduction/installation\"\r\n  />\r\n  <Card\r\n    subtitle=\"Setup\"\r\n    title=\"Site Settings\"\r\n    description=\"Setting up your Documents projects layout, links and search engine optimisation.\"\r\n    href=\"/docs/introduction/setup\"\r\n  />\r\n  <Card\r\n    subtitle=\"Support\"\r\n    title=\"Rubix Studios\"\r\n    description=\"Australia's leading branding, marketing and web development company.\"\r\n    href=\"https://www.rubixstudios.com.au/\"\r\n    external={true}\r\n  />\r\n</CardGrid>\n```\n\n## Image Card\n\n<CardGrid>\n  <Card title=\"Instructions\" href=\"/docs/introduction/installation\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Setup\" href=\"/docs/introduction/setup\" image=\"/images/og-image.png\" variant=\"image\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n</CardGrid>\n\n```jsx\n<CardGrid>\r\n  <Card\r\n    title=\"Instructions\"\r\n    href=\"/docs/introduction/installation\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n  <Card\r\n    title=\"Setup\"\r\n    href=\"/docs/introduction/setup\"\r\n    image=\"/images/og-image.png\"\r\n    variant=\"image\"\r\n  />\r\n  <Card\r\n    title=\"Rubix Studios\"\r\n    href=\"https://www.rubixstudios.com.au\"\r\n    image=\"/images/og-image.png\"\r\n    external={true}\r\n    variant=\"image\"\r\n  />\r\n</CardGrid>\n```\n"
  },
  {
    "slug": "/markdown/diagrams",
    "title": "Diagrams",
    "description": "Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.",
    "content": "Diagrams are powerful tools for visualizing processes, relationships, and decisions. This section showcases different types of diagrams created using **Mermaid**, complete with examples and reusable code snippets to integrate into your projects.\n\n## Flowchart\n\nA flowchart represents a sequence of steps or processes in a visual format. Use this diagram to map workflows, decision-making processes, or operational flows.\n\n```jsx\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    Start --> Task1;\r\n    Task1 --> Task2;\r\n    Task2 --> End;\r\n  \\`}\r\n/>\n```\n\n## Decision Tree\n\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\n\n```jsx\n<Mermaid\r\n  chart={\\`\r\n    graph TD;\r\n    A[Start] --> B{Is it raining?};\r\n    B -->|Yes| C[Take an umbrella];\r\n    B -->|No| D[Enjoy the weather];\r\n    C --> E[Go outside];\r\n    D --> E;\r\n  \\`}\r\n/>\n```\n\n## Entity-Relationship Diagram\n\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\n\n```jsx\n<Mermaid\r\n  chart={\\`\r\n    erDiagram\r\n    CUSTOMER ||--o{ ORDER : places\r\n    ORDER ||--|{ LINE-ITEM : contains\r\n    PRODUCT ||--o{ LINE-ITEM : \"included in\"\r\n    CUSTOMER {\r\n        string name\r\n        string email\r\n    }\r\n    ORDER {\r\n        int orderNumber\r\n        date orderDate\r\n    }\r\n    LINE-ITEM {\r\n        int quantity\r\n        float price\r\n    }\r\n    PRODUCT {\r\n        int productId\r\n        string name\r\n        float price\r\n    }\r\n  \\`}\r\n/>\n```\n\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\n"
  },
  {
    "slug": "/markdown/filetree",
    "title": "Filetree",
    "description": "This section provides an overview of file structures and their implementation using the FileTree component.",
    "content": "This section demonstrates the structure of a file tree using the `FileTree` component. Below is an example showcasing folders and files organized hierarchically for a project setup.\n\n<FileTree>\n  <Folder name=\"src\" label=\"Source Code\">\n    <File name=\"index.tsx\" label=\"Index File\" />\n\n    <Folder name=\"components\" label=\"Components\">\n      <File name=\"button.tsx\" label=\"Button Component\" />\n\n      <File name=\"input.tsx\" label=\"Input Component\" />\n    </Folder>\n\n    <Folder name=\"pages\" label=\"Pages\">\n      <File name=\"home.tsx\" label=\"Home Page\" />\n\n      <File name=\"about.tsx\" label=\"About Page\" />\n    </Folder>\n  </Folder>\n</FileTree>\n\n## How to Use\n\nIntegrate the `FileTree` component into your project to visually represent file and folder structures. This is particularly useful for documentation, tutorials, or providing users with an overview of your project's architecture.\n\n### JSX Code Example\n\nHere is how you can define the file tree structure in for use in your project:\n\n```jsx\n<FileTree>\r\n  <Folder name=\"src\" label=\"Source Code\">\r\n    <File name=\"index.tsx\" label=\"Index File\" />\r\n    <Folder name=\"components\" label=\"Components\">\r\n      <File name=\"button.tsx\" label=\"Button Component\" />\r\n      <File name=\"input.tsx\" label=\"Input Component\" />\r\n    </Folder>\r\n    <Folder name=\"pages\" label=\"Pages\">\r\n      <File name=\"home.tsx\" label=\"Home Page\" />\r\n      <File name=\"about.tsx\" label=\"About Page\" />\r\n    </Folder>\r\n  </Folder>\r\n</FileTree>\n```\n\nUse this code as a template to set up your own file tree structure and customize it as needed.\n"
  },
  {
    "slug": "/markdown",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Sample Document with Mermaid\n\nHere is a Mermaid diagram:\n\nThis diagram should render automatically without any extra imports.\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  },
  {
    "slug": "/markdown/lists",
    "title": "Lists",
    "description": "This section provides an overview of creating and using lists in the Documents boilerplate.",
    "content": "Learn how to create and render different types of lists in the Documents boilerplate. Examples include checklists, ordered lists, unordered lists and nested lists.\n\n## Checklist\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n```jsx\n- [x] Write the press release\r\n- [ ] Update the website\r\n- [ ] Contact the media\n```\n\n## Simple List\n\n* Item 1\n* Item 2\n* Item 3\n\n```jsx\n- Item 1\r\n- Item 2\r\n- Item 3\n```\n\n## Number List\n\n1. Research\n2. Draft the content\n3. Review and edit\n4. Publish\n\n```jsx\n1. Research\r\n2. Draft the content\r\n3. Review and edit\r\n4. Publish\n```\n\n## Nested List\n\n* Main Category 1\n  * Sub Item 1.1\n  * Sub Item 1.2\n* Main Category 2\n  * Sub Item 2.1\n  * Sub Item 2.2\n\n```jsx\n- Main Category 1\r\n  - Sub Item 1.1\r\n  - Sub Item 1.2\r\n- Main Category 2\r\n  - Sub Item 2.1\r\n  - Sub Item 2.2\n```\n\nUse these examples as a foundation to create and customize lists that fit your project's needs.\n"
  },
  {
    "slug": "/markdown/maths",
    "title": "Maths",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Basic Algebra\n\nThe area of a circle ($$A$$) can be calculated using the radius ($$r$$) as follows:\n\n```math\nA = \\pi r^2\n```\n\n## Quadratic Formula\n\nThe quadratic formula for solving an equation of the form $$ax^2 + bx + c = 0$$ is:\n\n```math\nx = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\n```\n\n## Newton's Second Law of Motion\n\nNewton's second law of motion states that force ($$F$$) is the product of mass ($$m$$) and acceleration ($$a$$):\n\n```math\nF = ma\n```\n\n## Pythagorean Theorem\n\nThe Pythagorean theorem relates the lengths of the sides of a right triangle:\n\n```math\na^2 + b^2 = c^2\n```\n\n## Einstein's Mass-Energy Equivalence\n\nEinstein's famous equation relates energy ($$E$$), mass ($$m$$), and the speed of light ($$c$$):\n\n```math\nE = mc^2\n```\n"
  },
  {
    "slug": "/markdown/notes",
    "title": "Notes",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Standard Note\n\n<Note title=\"Required\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n## Success Note\n\n<Note title=\"Required\" type=\"success\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n## Warning Note\n\n<Note title=\"Required\" type=\"warning\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n\n## Danger Note\n\n<Note title=\"Required\" type=\"danger\">\n  The project's search functionality relies on the Husky's automation to build\r\n  `search-data/documents.json` ensure git commit is performed to generate this\r\n  file.\n</Note>\n"
  },
  {
    "slug": "/markdown/steps",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "The `<Step>` and `<StepItem>` components allow you to create structured step-by-step guides in your documentation. These components are particularly useful when you want to break down a process or tutorial into easy-to-follow stages.\n\n## Steps\n\nTo create a step-by-step guide in your MDX, you can use the following structure:\n\n<Step>\n  <StepItem title=\"Install Node.js\">\n    Make sure you have Node.js installed on your machine. You can download it from [here](https://nodejs.org).\n\n    To verify the installation, run the following command:\n\n    ```bash\n    node -v\n    ```\n  </StepItem>\n\n  <StepItem title=\"Install Dependencies\">\n    After cloning the repository, navigate to the project directory and install the necessary dependencies:\n\n    ```bash\n    npm install\n    ```\n  </StepItem>\n\n  <StepItem title=\"Run the Project\">\n    Start the development server:\n\n    ```bash\n    npm run dev\n    ```\n\n    You can access the application at:\n\n    ```bash\n    http://localhost:3000\n    ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/markdown/table",
    "title": "Table",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n| Feature       | Documentation Link |                    Notes |\r\n| :------------ | :----------------: | -----------------------: |\r\n| **Feature A** |     [Docs](#)      | For more info click here |\r\n| **Feature B** |     [Guide](#)     |  See the full guide here |\r\n| **Feature C** |     [Setup](#)     |       Setup instructions |\n"
  },
  {
    "slug": "/markdown/tabs",
    "title": "Tabs",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n"
  },
  {
    "slug": "/navigation",
    "title": "Github",
    "description": "How to build our your documents menu and navigations.",
    "content": "# This is a test header for the documentation website\n\nLet's see if this works :)\n"
  },
  {
    "slug": "/powershell/Docs/execution",
    "title": "Set-ExecutionPolicy",
    "description": "",
    "content": "import { Callout } from \"nextra/components\";\n\n{/* <Callout type=\"info\">\r\n  This page is a direct pull from the official Microsoft documentation. The original page can be found [here](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.6&WT.mc_id=ps-gethelp).\r\n  </Callout> */}\n\n## SYNOPSIS\n\nSets the PowerShell execution policies for Windows computers.\n\n## SYNTAX\n\n### All\n\n```\nSet-ExecutionPolicy [-ExecutionPolicy] <ExecutionPolicy> [[-Scope] <ExecutionPolicyScope>] [-Force]\r\n [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n## DESCRIPTION\n\nThe `Set-ExecutionPolicy` cmdlet changes PowerShell execution policies for Windows computers. For\r\nmore information, see [about\\_Execution\\_Policies](../Microsoft.PowerShell.Core/about/about_Execution_Policies.md).\n\nBeginning in PowerShell 6.0 for non-Windows computers, the default execution policy is\r\n`Unrestricted` and can't be changed. The `Set-ExecutionPolicy` cmdlet is available, but PowerShell\r\ndisplays a console message that it's not supported.\n\nAn execution policy is part of the PowerShell security strategy. Execution policies determine\r\nwhether you can load configuration files, such as your PowerShell profile, or run scripts. And,\r\nwhether scripts must be digitally signed before they are run.\n\nThe `Set-ExecutionPolicy` cmdlet's default scope is `LocalMachine`, which affects everyone who\r\nuses the computer. To change the execution policy for `LocalMachine`, start PowerShell with **Run\r\nas Administrator**.\n\nTo display the execution policies for each scope, use `Get-ExecutionPolicy -List`. To see the\r\neffective execution policy for your PowerShell session use `Get-ExecutionPolicy` with no parameters.\n\n## EXAMPLES\n\n### Example 1: Set an execution policy\n\nThis example shows how to set the execution policy for the local computer.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\r\nGet-ExecutionPolicy -List\n```\n\n```\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser    RemoteSigned\r\n LocalMachine    RemoteSigned\n```\n\nThe `Set-ExecutionPolicy` cmdlet uses the **ExecutionPolicy** parameter to specify the\r\n`RemoteSigned` policy. The **Scope** parameter specifies the default scope value, `LocalMachine`. To\r\nview the execution policy settings, use the `Get-ExecutionPolicy` cmdlet with the **List**\r\nparameter.\n\n### Example 2: Set an execution policy that conflicts with a Group Policy\n\nThis command attempts to set the `LocalMachine` scope's execution policy to `Restricted`.\r\n`LocalMachine` is more restrictive, but isn't the effective policy because it conflicts with a\r\nGroup Policy. The `Restricted` policy is written to the registry hive `HKEY_LOCAL_MACHINE`.\n\n```powershell\nPS> Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope LocalMachine\r\n\r\nSet-ExecutionPolicy : PowerShell updated your local preference successfully, but the setting is\r\noverridden by the Group Policy applied to your system. Due to the override, your shell will retain\r\nits current effective execution policy of \"AllSigned\". Contact your Group Policy administrator for\r\nmore information. At line:1 char:20 + Set-ExecutionPolicy <<<< restricted\r\n\r\nPS> Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\r\n\r\n    Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\r\n\r\nName                    Property\r\n----                    --------\r\nMicrosoft.PowerShell    Path            : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n                        ExecutionPolicy : Restricted\r\nScriptedDiagnostics     ExecutionPolicy : Unrestricted\n```\n\nThe `Set-ExecutionPolicy` cmdlet uses the **ExecutionPolicy** parameter to specify the `Restricted`\r\npolicy. The **Scope** parameter specifies the default scope value, `LocalMachine`. The\r\n`Get-ChildItem` cmdlet uses the **Path** parameter with the `HKLM:` drive to specify registry\r\nlocation.\n\n### Example 3: Apply the execution policy from a remote computer to a local computer\n\nThis command gets the execution policy object from a remote computer and sets the policy on the\r\nlocal computer. `Get-ExecutionPolicy` sends a **Microsoft.PowerShell.ExecutionPolicy** object down\r\nthe pipeline. `Set-ExecutionPolicy` accepts pipeline input and doesn't require the\r\n**ExecutionPolicy** parameter.\n\n```powershell\nInvoke-Command -ComputerName Server01 -ScriptBlock { Get-ExecutionPolicy } | Set-ExecutionPolicy\n```\n\nThe `Invoke-Command` cmdlet is executed at the local computer and sends the **ScriptBlock** to the\r\nremote computer. The **ComputerName** parameter specifies the remote computer, **Server01**. The\r\n**ScriptBlock** parameter runs `Get-ExecutionPolicy` on the remote computer. The\r\n`Get-ExecutionPolicy` object is sent down the pipeline to the `Set-ExecutionPolicy`.\r\n`Set-ExecutionPolicy` applies the execution policy to the local computer's default scope,\r\n`LocalMachine`.\n\n### Example 4: Set the scope for an execution policy\n\nThis example shows how to set an execution policy for a specified scope, `CurrentUser`. The\r\n`CurrentUser` scope only affects the user who sets this scope.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy AllSigned -Scope CurrentUser\r\nGet-ExecutionPolicy -List\n```\n\n```\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser       AllSigned\r\n LocalMachine    RemoteSigned\n```\n\n`Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `AllSigned` policy.\r\nThe **Scope** parameter specifies the `CurrentUser`. To view the execution policy settings, use the\r\n`Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\nThe effective execution policy for the user becomes `AllSigned`.\n\n### Example 5: Remove the execution policy for the current user\n\nThis example shows how use the `Undefined` execution policy to remove an execution policy for a\r\nspecified scope.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy Undefined -Scope CurrentUser\r\nGet-ExecutionPolicy -List\n```\n\n```\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser       Undefined\r\n LocalMachine    RemoteSigned\n```\n\n`Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `Undefined` policy. The\r\n**Scope** parameter specifies the `CurrentUser`. To view the execution policy settings, use the\r\n`Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\n### Example 6: Set the execution policy for the current PowerShell session\n\nThe `Process` scope only affects the current PowerShell session. The execution policy is saved in\r\nthe environment variable `$Env:PSExecutionPolicyPreference` and is deleted when the session is\r\nclosed.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy AllSigned -Scope Process\n```\n\n```\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       AllSigned\r\n  CurrentUser    RemoteSigned\r\n LocalMachine    RemoteSigned\n```\n\nThe `Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `AllSigned`\r\npolicy. The **Scope** parameter specifies the value `Process`. To view the execution policy\r\nsettings, use the `Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\n### Example 7: Unblock a script to run it without changing the execution policy\n\nThis example shows how the `RemoteSigned` execution policy prevents you from running unsigned\r\nscripts.\n\nA best practice is to read the script's code and verify it's safe *before* using the `Unblock-File`\r\ncmdlet. The `Unblock-File` cmdlet unblocks scripts so they can run, but doesn't change the execution\r\npolicy.\n\n```powershell\nPS> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\r\n\r\nPS> Get-ExecutionPolicy\r\n\r\nRemoteSigned\r\n\r\nPS> .\\Start-ActivityTracker.ps1\r\n\r\n.\\Start-ActivityTracker.ps1 : File .\\Start-ActivityTracker.ps1 cannot be loaded.\r\nThe file .\\Start-ActivityTracker.ps1 is not digitally signed.\r\nThe script will not execute on the system.\r\nFor more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.\r\nAt line:1 char:1\r\n+ .\\Start-ActivityTracker.ps1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], PSSecurityException\r\n+ FullyQualifiedErrorId : UnauthorizedAccess\r\n\r\nPS> Unblock-File -Path .\\Start-ActivityTracker.ps1\r\n\r\nPS> Get-ExecutionPolicy\r\n\r\nRemoteSigned\r\n\r\nPS> .\\Start-ActivityTracker.ps1\r\n\r\nTask 1:\n```\n\nThe `Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `RemoteSigned`\r\npolicy. The policy is set for the default scope, `LocalMachine`.\n\nThe `Get-ExecutionPolicy` cmdlet shows that `RemoteSigned` is the effective execution policy for\r\nthe current PowerShell session.\n\nThe `Start-ActivityTracker.ps1` script is executed from the current directory. The script is blocked\r\nby `RemoteSigned` because the script isn't digitally signed.\n\nFor this example, the script's code was reviewed and verified as safe to run. The `Unblock-File`\r\ncmdlet uses the **Path** parameter to unblock the script.\n\nTo verify that `Unblock-File` didn't change the execution policy, `Get-ExecutionPolicy` displays the\r\neffective execution policy, `RemoteSigned`.\n\nThe script, `Start-ActivityTracker.ps1` is executed from the current directory. The script begins to\r\nrun because it was unblocked by the `Unblock-File` cmdlet.\n\n## PARAMETERS\n\n### -ExecutionPolicy\n\nSpecifies the execution policy. If there are no Group Policies and each scope's execution policy is\r\nset to `Undefined`, then `Restricted` becomes the effective policy for all users.\n\nThe acceptable execution policy values are as follows:\n\n* `AllSigned`. Requires that all scripts and configuration files are signed by a trusted publisher,\r\n  including scripts written on the local computer.\n* `Bypass`. Nothing is blocked and there are no warnings or prompts.\n* `Default`. Sets the default execution policy. `Restricted` for Windows clients or `RemoteSigned`\r\n  for Windows servers.\n* `RemoteSigned`. Requires that all scripts and configuration files downloaded from the Internet\r\n  are signed by a trusted publisher. The default execution policy for Windows server computers.\n* `Restricted`. Doesn't load configuration files or run scripts. The default execution policy for\r\n  Windows client computers.\n* `Undefined`. No execution policy is set for the scope. Removes an assigned execution policy from\r\n  a scope that is not set by a Group Policy. If the execution policy in all scopes is `Undefined`,\r\n  the effective execution policy is `Restricted`.\n* `Unrestricted`. Beginning in PowerShell 6.0, this is the default execution policy for\r\n  non-Windows computers and can't be changed. Loads all configuration files and runs all scripts. If\r\n  you run an unsigned script that was downloaded from the internet, you're prompted for permission\r\n  before it runs.\n\n```yaml\nType: Microsoft.PowerShell.ExecutionPolicy\r\nParameter Sets: (All)\r\nAliases:\r\nAccepted values: AllSigned, Bypass, Default, RemoteSigned, Restricted, Undefined, Unrestricted\r\n\r\nRequired: True\r\nPosition: 0\r\nDefault value: None\r\nAccept pipeline input: True (ByValue)\r\nAccept wildcard characters: False\n```\n\n### -Force\n\nSuppresses all the confirmation prompts. Use caution with this parameter to avoid unexpected\r\nresults.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases:\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### -Scope\n\nSpecifies the scope that is affected by an execution policy. The default scope is `LocalMachine`.\n\nThe effective execution policy is determined by the order of precedence as follows:\n\n* `MachinePolicy` - Set by a Group Policy for all users of the computer\n* `UserPolicy` - Set by a Group Policy for the current user of the computer\n* `Process` - Affects only the current PowerShell session\n* `LocalMachine` - Default scope that affects all users of the computer\n* `CurrentUser` - Affects only the current user\n\nThe `Process` scope only affects the current PowerShell session. The execution policy is saved in\r\nthe environment variable `$Env:PSExecutionPolicyPreference`, rather than the registry. When the\r\nPowerShell session is closed, the variable and value are deleted.\n\nExecution policies for the `CurrentUser` scope are written to the registry hive `HKEY_LOCAL_USER`.\n\nExecution policies for the `LocalMachine` scope are written to the registry hive\r\n`HKEY_LOCAL_MACHINE`.\n\n```yaml\nType: Microsoft.PowerShell.ExecutionPolicyScope\r\nParameter Sets: (All)\r\nAliases:\r\nAccepted values: CurrentUser, LocalMachine, MachinePolicy, Process, UserPolicy\r\n\r\nRequired: False\r\nPosition: 1\r\nDefault value: LocalMachine\r\nAccept pipeline input: True (ByPropertyName)\r\nAccept wildcard characters: False\n```\n\n### -Confirm\n\nPrompts you for confirmation before running the cmdlet.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases: cf\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### -WhatIf\n\nShows what would happen if the cmdlet runs. The cmdlet is not run.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases: wi\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### CommonParameters\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable,\r\n-InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose,\r\n-WarningAction, and -WarningVariable. For more information, see\r\n[about\\_CommonParameters](https://go.microsoft.com/fwlink/?LinkID=113216).\n\n## INPUTS\n\n### Microsoft.PowerShell.ExecutionPolicy\n\nYou can pipe an execution policy object to this cmdlet.\n\n### System.String\n\nYou can pipe a string that contains the name of an execution policy to this cmdlet.\n\n## OUTPUTS\n\n### None\n\nThis cmdlet returns no output.\n\n## NOTES\n\n`Set-ExecutionPolicy` doesn't change the `MachinePolicy` and `UserPolicy` scopes because they are\r\nset by Group Policies.\n\n`Set-ExecutionPolicy` doesn't override a Group Policy, even if the user preference is more\r\nrestrictive than the policy.\n\nIf the Group Policy **Turn on Script Execution** is enabled for the computer or user, the user\r\npreference is saved, but it's not effective. PowerShell displays a message that explains the\r\nconflict.\n\n## RELATED LINKS\n\n[about\\_Execution\\_Policies](../Microsoft.PowerShell.Core/About/about_Execution_Policies.md)\n\n[about\\_Group\\_Policy\\_Settings](../Microsoft.PowerShell.Core/About/about_Group_Policy_Settings.md)\n\n[about\\_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md)\n\n[Get-AuthenticodeSignature](Get-AuthenticodeSignature.md)\n\n[Get-ChildItem](../Microsoft.PowerShell.Management/Get-ChildItem.md)\n\n[Get-ExecutionPolicy](Get-ExecutionPolicy.md)\n\n[Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md)\n\n[Set-AuthenticodeSignature](Set-AuthenticodeSignature.md)\n\n[Unblock-File](../Microsoft.PowerShell.Utility/Unblock-File.md)\n"
  },
  {
    "slug": "/powershell/Docs/test",
    "title": "test",
    "description": "Sets the PowerShell execution policies for Windows computers.",
    "content": "import { Callout } from 'nextra/components'\n\n<Callout type=\"info\">\n  This page is a direct pull from the official Microsoft documentation. The original page can be found [here](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.6\\&WT.mc_id=ps-gethelp).\n</Callout>\n\n# Set-ExecutionPolicy\n\n## SYNOPSIS\n\nSets the PowerShell execution policies for Windows computers.\n\n## SYNTAX\n\n### All\n\n```\nSet-ExecutionPolicy [-ExecutionPolicy] <ExecutionPolicy> [[-Scope] <ExecutionPolicyScope>] [-Force]\r\n [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n## DESCRIPTION\n\nThe `Set-ExecutionPolicy` cmdlet changes PowerShell execution policies for Windows computers. For\r\nmore information, see [about\\_Execution\\_Policies](../Microsoft.PowerShell.Core/about/about_Execution_Policies.md).\n\nBeginning in PowerShell 6.0 for non-Windows computers, the default execution policy is\r\n`Unrestricted` and can't be changed. The `Set-ExecutionPolicy` cmdlet is available, but PowerShell\r\ndisplays a console message that it's not supported.\n\nAn execution policy is part of the PowerShell security strategy. Execution policies determine\r\nwhether you can load configuration files, such as your PowerShell profile, or run scripts. And,\r\nwhether scripts must be digitally signed before they are run.\n\nThe `Set-ExecutionPolicy` cmdlet's default scope is `LocalMachine`, which affects everyone who\r\nuses the computer. To change the execution policy for `LocalMachine`, start PowerShell with **Run\r\nas Administrator**.\n\nTo display the execution policies for each scope, use `Get-ExecutionPolicy -List`. To see the\r\neffective execution policy for your PowerShell session use `Get-ExecutionPolicy` with no parameters.\n\n## EXAMPLES\n\n### Example 1: Set an execution policy\n\nThis example shows how to set the execution policy for the local computer.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\r\nGet-ExecutionPolicy -List\n```\n\n```Output\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser    RemoteSigned\r\n LocalMachine    RemoteSigned\n```\n\nThe `Set-ExecutionPolicy` cmdlet uses the **ExecutionPolicy** parameter to specify the\r\n`RemoteSigned` policy. The **Scope** parameter specifies the default scope value, `LocalMachine`. To\r\nview the execution policy settings, use the `Get-ExecutionPolicy` cmdlet with the **List**\r\nparameter.\n\n### Example 2: Set an execution policy that conflicts with a Group Policy\n\nThis command attempts to set the `LocalMachine` scope's execution policy to `Restricted`.\r\n`LocalMachine` is more restrictive, but isn't the effective policy because it conflicts with a\r\nGroup Policy. The `Restricted` policy is written to the registry hive `HKEY_LOCAL_MACHINE`.\n\n```powershell\nPS> Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope LocalMachine\r\n\r\nSet-ExecutionPolicy : PowerShell updated your local preference successfully, but the setting is\r\noverridden by the Group Policy applied to your system. Due to the override, your shell will retain\r\nits current effective execution policy of \"AllSigned\". Contact your Group Policy administrator for\r\nmore information. At line:1 char:20 + Set-ExecutionPolicy <<<< restricted\r\n\r\nPS> Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\r\n\r\n    Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds\r\n\r\nName                    Property\r\n----                    --------\r\nMicrosoft.PowerShell    Path            : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n                        ExecutionPolicy : Restricted\r\nScriptedDiagnostics     ExecutionPolicy : Unrestricted\n```\n\nThe `Set-ExecutionPolicy` cmdlet uses the **ExecutionPolicy** parameter to specify the `Restricted`\r\npolicy. The **Scope** parameter specifies the default scope value, `LocalMachine`. The\r\n`Get-ChildItem` cmdlet uses the **Path** parameter with the `HKLM:` drive to specify registry\r\nlocation.\n\n### Example 3: Apply the execution policy from a remote computer to a local computer\n\nThis command gets the execution policy object from a remote computer and sets the policy on the\r\nlocal computer. `Get-ExecutionPolicy` sends a **Microsoft.PowerShell.ExecutionPolicy** object down\r\nthe pipeline. `Set-ExecutionPolicy` accepts pipeline input and doesn't require the\r\n**ExecutionPolicy** parameter.\n\n```powershell\nInvoke-Command -ComputerName Server01 -ScriptBlock { Get-ExecutionPolicy } | Set-ExecutionPolicy\n```\n\nThe `Invoke-Command` cmdlet is executed at the local computer and sends the **ScriptBlock** to the\r\nremote computer. The **ComputerName** parameter specifies the remote computer, **Server01**. The\r\n**ScriptBlock** parameter runs `Get-ExecutionPolicy` on the remote computer. The\r\n`Get-ExecutionPolicy` object is sent down the pipeline to the `Set-ExecutionPolicy`.\r\n`Set-ExecutionPolicy` applies the execution policy to the local computer's default scope,\r\n`LocalMachine`.\n\n### Example 4: Set the scope for an execution policy\n\nThis example shows how to set an execution policy for a specified scope, `CurrentUser`. The\r\n`CurrentUser` scope only affects the user who sets this scope.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy AllSigned -Scope CurrentUser\r\nGet-ExecutionPolicy -List\n```\n\n```Output\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser       AllSigned\r\n LocalMachine    RemoteSigned\n```\n\n`Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `AllSigned` policy.\r\nThe **Scope** parameter specifies the `CurrentUser`. To view the execution policy settings, use the\r\n`Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\nThe effective execution policy for the user becomes `AllSigned`.\n\n### Example 5: Remove the execution policy for the current user\n\nThis example shows how use the `Undefined` execution policy to remove an execution policy for a\r\nspecified scope.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy Undefined -Scope CurrentUser\r\nGet-ExecutionPolicy -List\n```\n\n```Output\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       Undefined\r\n  CurrentUser       Undefined\r\n LocalMachine    RemoteSigned\n```\n\n`Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `Undefined` policy. The\r\n**Scope** parameter specifies the `CurrentUser`. To view the execution policy settings, use the\r\n`Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\n### Example 6: Set the execution policy for the current PowerShell session\n\nThe `Process` scope only affects the current PowerShell session. The execution policy is saved in\r\nthe environment variable `$Env:PSExecutionPolicyPreference` and is deleted when the session is\r\nclosed.\n\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy AllSigned -Scope Process\n```\n\n```Output\n        Scope ExecutionPolicy\r\n        ----- ---------------\r\nMachinePolicy       Undefined\r\n   UserPolicy       Undefined\r\n      Process       AllSigned\r\n  CurrentUser    RemoteSigned\r\n LocalMachine    RemoteSigned\n```\n\nThe `Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `AllSigned`\r\npolicy. The **Scope** parameter specifies the value `Process`. To view the execution policy\r\nsettings, use the `Get-ExecutionPolicy` cmdlet with the **List** parameter.\n\n### Example 7: Unblock a script to run it without changing the execution policy\n\nThis example shows how the `RemoteSigned` execution policy prevents you from running unsigned\r\nscripts.\n\nA best practice is to read the script's code and verify it's safe *before* using the `Unblock-File`\r\ncmdlet. The `Unblock-File` cmdlet unblocks scripts so they can run, but doesn't change the execution\r\npolicy.\n\n```powershell\nPS> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine\r\n\r\nPS> Get-ExecutionPolicy\r\n\r\nRemoteSigned\r\n\r\nPS> .\\Start-ActivityTracker.ps1\r\n\r\n.\\Start-ActivityTracker.ps1 : File .\\Start-ActivityTracker.ps1 cannot be loaded.\r\nThe file .\\Start-ActivityTracker.ps1 is not digitally signed.\r\nThe script will not execute on the system.\r\nFor more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170.\r\nAt line:1 char:1\r\n+ .\\Start-ActivityTracker.ps1\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (:) [], PSSecurityException\r\n+ FullyQualifiedErrorId : UnauthorizedAccess\r\n\r\nPS> Unblock-File -Path .\\Start-ActivityTracker.ps1\r\n\r\nPS> Get-ExecutionPolicy\r\n\r\nRemoteSigned\r\n\r\nPS> .\\Start-ActivityTracker.ps1\r\n\r\nTask 1:\n```\n\nThe `Set-ExecutionPolicy` uses the **ExecutionPolicy** parameter to specify the `RemoteSigned`\r\npolicy. The policy is set for the default scope, `LocalMachine`.\n\nThe `Get-ExecutionPolicy` cmdlet shows that `RemoteSigned` is the effective execution policy for\r\nthe current PowerShell session.\n\nThe `Start-ActivityTracker.ps1` script is executed from the current directory. The script is blocked\r\nby `RemoteSigned` because the script isn't digitally signed.\n\nFor this example, the script's code was reviewed and verified as safe to run. The `Unblock-File`\r\ncmdlet uses the **Path** parameter to unblock the script.\n\nTo verify that `Unblock-File` didn't change the execution policy, `Get-ExecutionPolicy` displays the\r\neffective execution policy, `RemoteSigned`.\n\nThe script, `Start-ActivityTracker.ps1` is executed from the current directory. The script begins to\r\nrun because it was unblocked by the `Unblock-File` cmdlet.\n\n## PARAMETERS\n\n### -ExecutionPolicy\n\nSpecifies the execution policy. If there are no Group Policies and each scope's execution policy is\r\nset to `Undefined`, then `Restricted` becomes the effective policy for all users.\n\nThe acceptable execution policy values are as follows:\n\n* `AllSigned`. Requires that all scripts and configuration files are signed by a trusted publisher,\r\n  including scripts written on the local computer.\n* `Bypass`. Nothing is blocked and there are no warnings or prompts.\n* `Default`. Sets the default execution policy. `Restricted` for Windows clients or `RemoteSigned`\r\n  for Windows servers.\n* `RemoteSigned`. Requires that all scripts and configuration files downloaded from the Internet\r\n  are signed by a trusted publisher. The default execution policy for Windows server computers.\n* `Restricted`. Doesn't load configuration files or run scripts. The default execution policy for\r\n  Windows client computers.\n* `Undefined`. No execution policy is set for the scope. Removes an assigned execution policy from\r\n  a scope that is not set by a Group Policy. If the execution policy in all scopes is `Undefined`,\r\n  the effective execution policy is `Restricted`.\n* `Unrestricted`. Beginning in PowerShell 6.0, this is the default execution policy for\r\n  non-Windows computers and can't be changed. Loads all configuration files and runs all scripts. If\r\n  you run an unsigned script that was downloaded from the internet, you're prompted for permission\r\n  before it runs.\n\n```yaml\nType: Microsoft.PowerShell.ExecutionPolicy\r\nParameter Sets: (All)\r\nAliases:\r\nAccepted values: AllSigned, Bypass, Default, RemoteSigned, Restricted, Undefined, Unrestricted\r\n\r\nRequired: True\r\nPosition: 0\r\nDefault value: None\r\nAccept pipeline input: True (ByValue)\r\nAccept wildcard characters: False\n```\n\n### -Force\n\nSuppresses all the confirmation prompts. Use caution with this parameter to avoid unexpected\r\nresults.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases:\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### -Scope\n\nSpecifies the scope that is affected by an execution policy. The default scope is `LocalMachine`.\n\nThe effective execution policy is determined by the order of precedence as follows:\n\n* `MachinePolicy` - Set by a Group Policy for all users of the computer\n* `UserPolicy` - Set by a Group Policy for the current user of the computer\n* `Process` - Affects only the current PowerShell session\n* `LocalMachine` - Default scope that affects all users of the computer\n* `CurrentUser` - Affects only the current user\n\nThe `Process` scope only affects the current PowerShell session. The execution policy is saved in\r\nthe environment variable `$Env:PSExecutionPolicyPreference`, rather than the registry. When the\r\nPowerShell session is closed, the variable and value are deleted.\n\nExecution policies for the `CurrentUser` scope are written to the registry hive `HKEY_LOCAL_USER`.\n\nExecution policies for the `LocalMachine` scope are written to the registry hive\r\n`HKEY_LOCAL_MACHINE`.\n\n```yaml\nType: Microsoft.PowerShell.ExecutionPolicyScope\r\nParameter Sets: (All)\r\nAliases:\r\nAccepted values: CurrentUser, LocalMachine, MachinePolicy, Process, UserPolicy\r\n\r\nRequired: False\r\nPosition: 1\r\nDefault value: LocalMachine\r\nAccept pipeline input: True (ByPropertyName)\r\nAccept wildcard characters: False\n```\n\n### -Confirm\n\nPrompts you for confirmation before running the cmdlet.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases: cf\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### -WhatIf\n\nShows what would happen if the cmdlet runs. The cmdlet is not run.\n\n```yaml\nType: System.Management.Automation.SwitchParameter\r\nParameter Sets: (All)\r\nAliases: wi\r\n\r\nRequired: False\r\nPosition: Named\r\nDefault value: False\r\nAccept pipeline input: False\r\nAccept wildcard characters: False\n```\n\n### CommonParameters\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable,\r\n-InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose,\r\n-WarningAction, and -WarningVariable. For more information, see\r\n[about\\_CommonParameters](https://go.microsoft.com/fwlink/?LinkID=113216).\n\n## INPUTS\n\n### Microsoft.PowerShell.ExecutionPolicy\n\nYou can pipe an execution policy object to this cmdlet.\n\n### System.String\n\nYou can pipe a string that contains the name of an execution policy to this cmdlet.\n\n## OUTPUTS\n\n### None\n\nThis cmdlet returns no output.\n\n## NOTES\n\n`Set-ExecutionPolicy` doesn't change the `MachinePolicy` and `UserPolicy` scopes because they are\r\nset by Group Policies.\n\n`Set-ExecutionPolicy` doesn't override a Group Policy, even if the user preference is more\r\nrestrictive than the policy.\n\nIf the Group Policy **Turn on Script Execution** is enabled for the computer or user, the user\r\npreference is saved, but it's not effective. PowerShell displays a message that explains the\r\nconflict.\n\n## RELATED LINKS\n\n[about\\_Execution\\_Policies](../Microsoft.PowerShell.Core/About/about_Execution_Policies.md)\n\n[about\\_Group\\_Policy\\_Settings](../Microsoft.PowerShell.Core/About/about_Group_Policy_Settings.md)\n\n[about\\_Providers](../Microsoft.PowerShell.Core/About/about_Providers.md)\n\n[Get-AuthenticodeSignature](Get-AuthenticodeSignature.md)\n\n[Get-ChildItem](../Microsoft.PowerShell.Management/Get-ChildItem.md)\n\n[Get-ExecutionPolicy](Get-ExecutionPolicy.md)\n\n[Invoke-Command](../Microsoft.PowerShell.Core/Invoke-Command.md)\n\n[Set-AuthenticodeSignature](Set-AuthenticodeSignature.md)\n\n[Unblock-File](../Microsoft.PowerShell.Utility/Unblock-File.md)\n"
  },
  {
    "slug": "/powershell",
    "title": "Powershell",
    "description": "Setting up and configuring your documentation project",
    "content": "Setting up your new documentation project is straightforward. Most of the essential project settings can be configured within the `settings` folder.\n\n## Settings\n\nThis section provides the core settings for your documentation site, such as defining the site's URL, site icon and title.\n\n```tsx showLineNumbers\nexport const url = \"\"                 // The URL for your documentation site\r\nexport const siteicon = \"\"            // Icon displayed next to the site name in the header\r\nexport const sitename = \"\"            // Title of your documentation site\n```\n\n## Google Tags\n\nThis section allows you to integrate Google Tag Manager into your documentation project. You can add your GTM code and configure whether it's connected.\n\n```tsx showLineNumbers\nexport const gtm = \"\"                 // Add your Google Tag Manager code here\r\nexport const gtmconnected = true      // Set to true if GTM is connected, otherwise set to false\n```\n\n## Search Engine\n\nConfigure essential SEO settings to ensure your documentation site is optimized for search engines. This includes meta descriptions, keywords and social media sharing details like images and alt text.\n\n```tsx showLineNumbers\nexport const description = \"\"         // Description of your documentation site for SEO\r\nexport const keywords = [\"\", \"\"]      // List of SEO keywords for your documentation site\r\nexport const urlimage = \"\"            // The URL of the image used when sharing on social media)\r\nexport const imagealt = \"\"            // Alt text for shared images, helpful for screen readers\r\nexport const twitterhandle = \"\"       // Your companyâ€™s Twitter handle for social sharing\n```\n\n## Footer Branding\n\nThe footer settings allow you to customize the company information displayed at the bottom of the site. You can add the company name and the URL that the name will link to.\n\n```tsx showLineNumbers\nexport const companyname = \"\"         // The company name displayed in the copyright section\r\nexport const companylink = \"\"         // The URL your company name should link to\n```\n\n## General Layout\n\nThe layout settings control the appearance and functionality of various elements of the documentation site, such as branding, the right sidebar, feedback options, table of contents, and scroll-to-top functionality.\n\n```tsx showLineNumbers\nexport const branding = true          // Set to true to display our branding elements\r\nexport const rightsidebar = true      // Set to true to enable the right sidebar with feedback, table of contents and scroll-to-top\r\nexport const feedbackedit = true      // Control to enable/disable feedback on GitHub\r\nexport const tableofcontent = true    // Control to enable/disable the generated table of contents\r\nexport const totopscroll = true       // Control to enable/disable scroll-to-top button\n```\n\n## Github Control\n\nIf your MDX files are hosted on GitHub, you can configure the project to load documents directly from there. This option can be useful for syncing documentation updates directly with your repository.\n\n```tsx showLineNumbers\nexport const loadfromgithub = false   // Set to true to load your MDX documents directly from GitHub\n```\n\n## Project Structure\n\n<CardGrid>\n  <Card title=\"Navigation\" href=\"/docs/navigation\" icon=\"alignJustify\" variant=\"small\" description=\"Creating your navigation\" />\n</CardGrid>\n"
  },
  {
    "slug": "/powershell/Learning/pwsh_advanced",
    "title": "Advanced PowerShell",
    "description": "A detailed guide to advanced PowerShell topics, including automation, performance tuning, security, and best practices.",
    "content": "# Introduction to Advanced PowerShell\n\nPowerShell is not just a scripting language but a full-fledged automation framework. This guide covers advanced topics that will help experienced users optimize workflows, improve performance, and enhance security.\n\n## Key Topics Covered\n\n* Advanced Scripting Techniques\n* Performance Optimization\n* Security and Hardening\n* Custom Modules and Advanced Functions\n* PowerShell Remoting\n* Working with APIs and Web Services\n* Debugging and Logging\n\n***\n\n# Advanced Scripting Techniques\n\n## Using Script Blocks Effectively\n\n```powershell\n$scriptBlock = { Get-Process | Where-Object { $_.CPU -gt 10 } }\r\nInvoke-Command -ScriptBlock $scriptBlock\n```\n\n## Dynamic Parameters\n\n```powershell\nfunction Get-UserInfo {\r\n    param(\r\n        [Parameter(Mandatory)]\r\n        [string]$Username\r\n    )\r\n    Get-ADUser -Filter {SamAccountName -eq $Username}\r\n}\n```\n\n## Using Background Jobs\n\n```powershell\nStart-Job -ScriptBlock { Get-Service }\r\nGet-Job | Receive-Job\n```\n\n***\n\n# Performance Optimization\n\n## Using Efficient Loops\n\n```powershell\n$LargeArray | ForEach-Object -Parallel { $_ * 2 }\n```\n\n## Avoiding Unnecessary Object Creation\n\n```powershell\n$Processes = Get-Process | Select-Object -Property Name, Id, CPU\n```\n\n## Optimizing Pipeline Execution\n\n```powershell\nGet-Service | Where-Object Status -eq 'Running' | Select-Object Name, DisplayName\n```\n\n***\n\n# Security and Hardening\n\n## Execution Policy Management\n\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n## Secure Credential Handling\n\n```powershell\n$Cred = Get-Credential\r\nInvoke-Command -ComputerName Server01 -Credential $Cred -ScriptBlock { Get-Process }\n```\n\n## Auditing and Logging\n\n```powershell\nSet-PSReadlineOption -HistorySaveStyle SaveAtExit\r\nGet-EventLog -LogName Security -Newest 10\n```\n\n***\n\n# Custom Modules and Advanced Functions\n\n## Creating Custom Modules\n\n```powershell\nNew-ModuleManifest -Path \"C:\\PowerShell\\MyModule.psd1\"\n```\n\n## Using Private Functions in Modules\n\n```powershell\nfunction PrivateFunction {\r\n    Write-Output \"This is private\"\r\n}\r\nExport-ModuleMember -Function * -Exclude PrivateFunction\n```\n\n***\n\n# PowerShell Remoting\n\n## Enabling and Configuring Remoting\n\n```powershell\nEnable-PSRemoting -Force\n```\n\n## Secure Remote Sessions\n\n```powershell\nNew-PSSession -ComputerName Server01 -Credential (Get-Credential)\n```\n\n***\n\n# Working with APIs and Web Services\n\n## Sending API Requests\n\n```powershell\n$Response = Invoke-RestMethod -Uri \"https://api.github.com/repos/microsoft/PowerShell\" -Method GET\r\n$Response | Format-List\n```\n\n## Parsing JSON Responses\n\n```powershell\n$Data = ConvertFrom-Json -InputObject $Response\r\n$Data.full_name\n```\n\n***\n\n# Debugging and Logging\n\n## Using Debugging Tools\n\n```powershell\nSet-PSDebug -Trace 2\n```\n\n## Writing Logs to Files\n\n```powershell\n\"Log entry: $(Get-Date)\" | Out-File \"C:\\Logs\\script.log\" -Append\n```\n\n***\n\n# Best Practices for Advanced Users\n\n## General Guidelines\n\n* Use `Try-Catch-Finally` for robust error handling\n* Implement logging in automation scripts\n* Secure scripts with least privilege principles\n* Optimize scripts for performance and efficiency\n\n***\n\nThis guide provides deep insights into advanced PowerShell topics. Keep refining your skills to become an expert in automation and scripting!\n"
  },
  {
    "slug": "/powershell/Learning/pwsh_basics",
    "title": "PowerShell Basics",
    "description": "A detailed guide to PowerShell basics, including commands, scripting, modules, and best practices.",
    "content": "# Introduction to PowerShell\n\nPowerShell is a powerful command-line shell and scripting language designed for automation and configuration management. Built on .NET, it provides deep system integration, making it a valuable tool for administrators and developers.\n\n## Why Use PowerShell?\n\n* Automates repetitive tasks\n* Manages system configurations\n* Works with various data formats (JSON, XML, CSV)\n* Supports remote administration\n* Extensible via modules and scripts\n\n***\n\n# Getting Started\n\n## Installation\n\nPowerShell comes pre-installed on Windows, but newer versions (PowerShell Core) are cross-platform and can be installed on macOS and Linux.\n\n### Check PowerShell Version\n\n```powershell\n$PSVersionTable.PSVersion\n```\n\n### Install PowerShell Core\n\n* **Windows**: Download from [Microsoft Store](https://aka.ms/powershell)\n* **Linux/macOS**: Use a package manager (e.g., `brew install powershell` for macOS)\n\n## Running PowerShell\n\n* **Windows**: Open `PowerShell` or `pwsh` for PowerShell Core.\n* **macOS/Linux**: Run `pwsh` in a terminal.\n\n***\n\n# Commands and Syntax\n\n## Cmdlets\n\nPowerShell commands are called **cmdlets** and follow a `Verb-Noun` format.\n\n```powershell\nGet-Process   # Retrieves running processes\r\nStop-Service  # Stops a service\n```\n\n### Finding Commands\n\n```powershell\nGet-Command -Noun Process\r\nGet-Help Get-Process -Full\n```\n\n***\n\n# Variables and Data Types\n\n## Declaring Variables\n\n```powershell\n$Name = \"PowerShell\"\r\n$Number = 10\r\n$IsAdmin = $true\n```\n\n## Data Types\n\n```powershell\n[String]$Text = \"Hello\"\r\n[Int]$Age = 30\r\n[Array]$Items = @(1,2,3)\n```\n\n***\n\n# Operators\n\n## Arithmetic Operators\n\n```powershell\n$Sum = 5 + 10\r\n$Multiply = 4 * 3\n```\n\n## Comparison Operators\n\n```powershell\n$Result = 5 -eq 5    # True\r\n$Check = 10 -gt 5    # True\n```\n\n***\n\n# Loops and Conditional Statements\n\n## If-Else\n\n```powershell\nif ($Age -ge 18) {\r\n    Write-Output \"Adult\"\r\n} else {\r\n    Write-Output \"Minor\"\r\n}\n```\n\n## Loops\n\n```powershell\n# For Loop\r\nfor ($i=0; $i -lt 5; $i++) { Write-Output $i }\r\n\r\n# While Loop\r\n$counter = 1\r\nwhile ($counter -le 3) {\r\n    Write-Output $counter\r\n    $counter++\r\n}\n```\n\n***\n\n# Functions and Scripts\n\n## Creating Functions\n\n```powershell\nfunction Greet {\r\n    param ($Name)\r\n    Write-Output \"Hello, $Name!\"\r\n}\r\nGreet -Name \"User\"\n```\n\n## Running Scripts\n\nSave as `script.ps1`, then execute:\n\n```powershell\n.\\script.ps1\n```\n\n***\n\n# Modules and Packages\n\n## Importing Modules\n\n```powershell\nImport-Module ActiveDirectory\n```\n\n## Installing Modules\n\n```powershell\nInstall-Module -Name PowerShellGet\n```\n\n***\n\n# File System Operations\n\n## Working with Files\n\n```powershell\nNew-Item -Path \"test.txt\" -ItemType File\r\nGet-Content \"test.txt\"\n```\n\n## Working with Directories\n\n```powershell\nNew-Item -Path \"C:\\Temp\" -ItemType Directory\r\nRemove-Item -Path \"C:\\Temp\" -Recurse\n```\n\n***\n\n# Working with JSON, XML, and CSV\n\n## JSON\n\n```powershell\n$Data = Get-Content \"data.json\" | ConvertFrom-Json\r\n$Data | ConvertTo-Json | Out-File \"output.json\"\n```\n\n## XML\n\n```powershell\n[xml]$xmlData = Get-Content \"data.xml\"\r\n$xmlData.DocumentElement.ChildNodes\n```\n\n## CSV\n\n```powershell\n$csv = Import-Csv \"data.csv\"\r\n$csv | Export-Csv \"output.csv\" -NoTypeInformation\n```\n\n***\n\n# Registry and WMI\n\n## Query Registry\n\n```powershell\nGet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\"\n```\n\n## Query WMI\n\n```powershell\nGet-WmiObject Win32_OperatingSystem\n```\n\n***\n\n# Remote Execution\n\n## Running Remote Commands\n\n```powershell\nInvoke-Command -ComputerName \"Server01\" -ScriptBlock { Get-Service }\n```\n\n## Entering Remote Sessions\n\n```powershell\nEnter-PSSession -ComputerName \"Server01\"\n```\n\n***\n\n# Error Handling and Debugging\n\n## Try-Catch Blocks\n\n```powershell\ntry {\r\n    Get-Item \"C:\\NonExistentFile.txt\"\r\n} catch {\r\n    Write-Output \"Error: $_\"\r\n}\n```\n\n## Debugging Scripts\n\n```powershell\nSet-PSDebug -Trace 1\n```\n\n***\n\n# Best Practices\n\n## General Guidelines\n\n* Use meaningful variable names\n* Follow `Verb-Noun` naming convention for functions\n* Use comments to improve readability\n* Avoid hardcoding values; use parameters instead\n\n## Security Practices\n\n* Avoid running scripts from untrusted sources\n* Use `Set-ExecutionPolicy` to control script execution\n* Regularly update PowerShell modules\n\n***\n\nThis guide provides a solid foundation in PowerShell. Keep exploring and practicing!\n"
  },
  {
    "slug": "/powershell/Learning/pwsh_prof",
    "title": "Professional PowerShell",
    "description": "A deep dive into PowerShell for professionals, focusing on enterprise automation, security, DevOps, and infrastructure management.",
    "content": "# Introduction to Professional PowerShell\n\nPowerShell is a critical tool for enterprise environments, enabling automation, security enforcement, and infrastructure management. This guide covers professional-level topics to maximize PowerShell's potential in large-scale environments.\n\n## Key Topics Covered\n\n* Enterprise Automation Strategies\n* Infrastructure as Code (IaC)\n* Security Hardening and Compliance\n* Advanced Remoting and Parallel Execution\n* DevOps and CI/CD Integration\n* Working with Databases and APIs\n* PowerShell DSC (Desired State Configuration)\n* Logging, Monitoring, and Alerting\n\n***\n\n# Enterprise Automation Strategies\n\n## Automating Active Directory Tasks\n\n```powershell\nImport-Module ActiveDirectory\r\nGet-ADUser -Filter * | Select-Object Name, SamAccountName, Enabled\n```\n\n## Automating Software Deployment\n\n```powershell\n$Computers = Get-Content \"C:\\servers.txt\"\r\nInvoke-Command -ComputerName $Computers -ScriptBlock {\r\n    Start-Process msiexec.exe -ArgumentList '/i C:\\Path\\To\\Software.msi /quiet /norestart' -Wait\r\n}\n```\n\n***\n\n# Infrastructure as Code (IaC) with PowerShell\n\n## Using PowerShell with Terraform\n\n```powershell\nterraform init\r\nterraform apply -auto-approve\n```\n\n## Deploying Azure Resources with PowerShell\n\n```powershell\nNew-AzResourceGroup -Name MyResourceGroup -Location \"EastUS\"\n```\n\n***\n\n# Security Hardening and Compliance\n\n## Auditing User Permissions\n\n```powershell\nGet-ACL \"C:\\SecureFolder\" | Format-List\n```\n\n## Enforcing Execution Policies\n\n```powershell\nSet-ExecutionPolicy AllSigned -Scope LocalMachine\n```\n\n## Checking for Unauthorized Accounts\n\n```powershell\nGet-LocalUser | Where-Object { $_.Enabled -eq $true -and $_.LastLogon -lt (Get-Date).AddDays(-90) }\n```\n\n***\n\n# Advanced Remoting and Parallel Execution\n\n## Running Commands on Multiple Servers\n\n```powershell\n$Servers = Get-Content \"C:\\Servers.txt\"\r\nInvoke-Command -ComputerName $Servers -ScriptBlock { Get-Service wuauserv }\n```\n\n## Using PowerShell Runspaces for Parallel Execution\n\n```powershell\n$runspacePool = [runspacefactory]::CreateRunspacePool(1, 5)\r\n$runspacePool.Open()\n```\n\n***\n\n# DevOps and CI/CD Integration\n\n## Using PowerShell in GitHub Actions\n\n```yaml\njobs:\r\n  build:\r\n    runs-on: windows-latest\r\n    steps:\r\n      - name: Run PowerShell Script\r\n        run: .\\deploy.ps1\n```\n\n## PowerShell in Jenkins Pipelines\n\n```powershell\npipeline {\r\n    agent any\r\n    stages {\r\n        stage('Deploy') {\r\n            steps {\r\n                powershell '.\\deploy.ps1'\r\n            }\r\n        }\r\n    }\r\n}\n```\n\n***\n\n# Working with Databases and APIs\n\n## Querying SQL Databases\n\n```powershell\n$Conn = New-Object System.Data.SqlClient.SqlConnection\r\n$Conn.ConnectionString = \"Server=MyServer;Database=MyDB;Integrated Security=True;\"\r\n$Conn.Open()\n```\n\n## Consuming REST APIs\n\n```powershell\n$Response = Invoke-RestMethod -Uri \"https://api.example.com/data\" -Method GET\r\n$Response | ConvertTo-Json\n```\n\n***\n\n# PowerShell DSC (Desired State Configuration)\n\n## Creating a DSC Configuration\n\n```powershell\nConfiguration SecureServer {\r\n    Node \"Server01\" {\r\n        WindowsFeature \"IIS\" {\r\n            Ensure = \"Present\"\r\n            Name   = \"Web-Server\"\r\n        }\r\n    }\r\n}\r\nSecureServer -OutputPath \"C:\\DSC\"\r\nStart-DscConfiguration -Path \"C:\\DSC\" -Wait -Verbose\n```\n\n***\n\n# Logging, Monitoring, and Alerting\n\n## Logging Script Output\n\n```powershell\n\"Log Entry: $(Get-Date)\" | Out-File \"C:\\Logs\\event.log\" -Append\n```\n\n## Monitoring Event Logs\n\n```powershell\nGet-EventLog -LogName Security -Newest 10\n```\n\n## Sending Email Alerts\n\n```powershell\nSend-MailMessage -To \"admin@example.com\" -From \"alerts@example.com\" -Subject \"Critical Alert\" -Body \"Server down!\" -SmtpServer \"smtp.example.com\"\n```\n\n***\n\n# Best Practices for Professional PowerShell Users\n\n## General Guidelines\n\n* Follow modular scripting principles\n* Implement error handling (`Try-Catch-Finally`)\n* Use logging and monitoring for all automation scripts\n* Secure credentials using `Get-Credential` or Azure Key Vault\n* Leverage PowerShell DSC for state management\n\n***\n\nThis guide provides in-depth coverage of professional PowerShell usage. Master these concepts to build scalable and secure automation solutions!\n"
  },
  {
    "slug": "/powershell/Learning/Shellboxing",
    "title": "Sandboxing in PowerShell",
    "description": "A guide to using PowerShell sandboxing for separating development and production environments.",
    "content": "import { Callout } from 'nextra/components';\n\n# PowerShell Sandboxing\n\n## Introduction\n\nSandboxing in PowerShell helps developers and administrators separate development environments from production environments, reducing the risk of unintended changes or security issues.\n\n<Callout>\n  **Key Benefits:** Isolation of environments, controlled execution, and safer deployment.\n</Callout>\n\n## Separating Development and Production Environments\n\n### 1. **Using PowerShell Execution Policies**\n\nRestrict script execution to prevent untrusted scripts from running in production.\n\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n### 2. **Creating a Dedicated Development Environment**\n\nUse PowerShell profiles to define different environments.\n\n```powershell\n# Development Profile\r\n$env:PSModulePath = \"C:\\DevModules;\" + $env:PSModulePath\n```\n\n```powershell\n# Production Profile\r\n$env:PSModulePath = \"C:\\ProdModules;\" + $env:PSModulePath\n```\n\n### 3. **Using Windows Sandbox for Safe Testing**\n\nWindows Sandbox provides an isolated environment to test scripts.\n\n#### Enabling Windows Sandbox:\n\n```powershell\nEnable-WindowsOptionalFeature -FeatureName \"Containers-DisposableClientVM\" -Online -NoRestart\n```\n\n#### Running PowerShell Scripts in Sandbox:\n\n1. Open **Windows Sandbox**.\n2. Copy and execute scripts without affecting the host machine.\n\n## Managing Configurations and Dependencies\n\n### 1. **Using PowerShell Modules for Environment Separation**\n\nStore development and production modules separately.\n\n```powershell\nImport-Module \"C:\\DevModules\\MyModule.psm1\"  # Development\r\nImport-Module \"C:\\ProdModules\\MyModule.psm1\"  # Production\n```\n\n### 2. **Using Virtual Environments with PowerShell Core**\n\nPowerShell Core allows using separate environments with different module sets.\n\n```powershell\n$env:PSModulePath = \"C:\\Users\\User\\DevEnv\\Modules;\" + $env:PSModulePath\n```\n\n## Deploying Scripts to Production\n\n### 1. **Using Git for Version Control**\n\nKeep track of changes and ensure a stable production version.\n\n```powershell\n# Commit and push changes\r\ngit add .\r\ngit commit -m \"Updated script\"\r\ngit push origin main\n```\n\n### 2. **Using PowerShell Remoting for Deployment**\n\nDeploy scripts to remote production servers securely.\n\n```powershell\nInvoke-Command -ComputerName ProdServer -FilePath \"C:\\Scripts\\Deploy.ps1\"\n```\n\n### 3. **Using CI/CD Pipelines for Automated Deployment**\n\nLeverage tools like Azure DevOps or GitHub Actions.\n\n#### Example GitHub Actions Workflow:\n\n```yaml\nname: Deploy PowerShell Script\r\non:\r\n  push:\r\n    branches:\r\n      - main\r\njobs:\r\n  deploy:\r\n    runs-on: windows-latest\r\n    steps:\r\n      - name: Checkout Repository\r\n        uses: actions/checkout@v2\r\n      - name: Run PowerShell Script\r\n        run: pwsh -File Deploy.ps1\n```\n\n## Conclusion\n\nUsing sandboxing techniques in PowerShell ensures safer script execution, maintains environment separation, and facilitates controlled deployments. By leveraging execution policies, Windows Sandbox, and deployment automation, administrators can confidently manage PowerShell environments.\n\n***\n\n### Additional Resources\n\n* [PowerShell Execution Policy](https://learn.microsoft.com/en-us/powershell/scripting/security/execution-policy)\n* [Windows Sandbox](https://learn.microsoft.com/en-us/windows/security/threat-protection/windows-sandbox/windows-sandbox-overview)\n* [GitHub Actions for PowerShell](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions)\n"
  },
  {
    "slug": "/random",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nAdding some random stuff to change the code\n"
  },
  {
    "slug": "/structure/deep/deeper/even-deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n<CardGrid>\n  <Card title=\"Page Structure\" href=\"/docs/structure/deep/deeper\" icon=\"alignJustify\" variant=\"small\" description=\"test description\" />\n\n  <Card title=\"Page Structure\" href=\"/docs/structure/deep/deeper\" icon=\"alignJustify\" variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" icon=\"alignJustify\" external={true} variant=\"small\" />\n\n  <Card title=\"Rubix Studios\" href=\"https://www.rubixstudios.com.au\" image=\"/images/og-image.png\" external={true} variant=\"image\" />\n</CardGrid>\n"
  },
  {
    "slug": "/structure/deep/deeper",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n\n## Tabs Example\n"
  },
  {
    "slug": "/structure/deep",
    "title": "Introduction",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n\n## Tabs Example\n"
  },
  {
    "slug": "/structure",
    "title": "Structure",
    "description": "This section provides an overview of Introduction.",
    "content": "Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam iste dolorum tempore consectetur explicabo tempora provident quia maxime, molestiae, facilis aperiam et, error illum vel ullam? Quis architecto dolore ullam\n\n* \\[x] Write the press release\n* \\[ ] Update the website\n* \\[ ] Contact the media\n\n| Syntax        | Description |   Test Text |\r\n| :------------ | :---------: | ----------: |\r\n| Header        |    Title    | Here's this |\r\n| Paragraph     |    Text     |    And more |\r\n| Strikethrough |             |    ~~Text~~ |\n\n## Getting Started\n\nTo begin using the Documentation Template, follow these simple steps:\n\n* Start by cloning the repository to your local machine.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Reprehenderit quae iure nulla deserunt dolore quam pariatur minus sapiente accusantium. Optio, necessitatibus sequi. Veritatis, aspernatur? Possimus quis repellat eum vitae eveniet.\n\n## Blockquotes\n\nBlockquotes are useful for emphasizing key points or quoting external sources:\n\n> \"Documentation is a love letter that you write to your future self.\" - Damian Conway\n\nFeel free to use blockquotes to highlight important information or quotes relevant to your documentation.\n\n## Code Examples with switch\n\nHere a custom tab component from shadcn ui is used.\n\n## Conclusion\n\nThank you for choosing the Documentation Template for your project. Whether you're documenting software, APIs, or processes, we're here to support you in creating clear and effective documentation. Happy documenting!\n"
  }
]